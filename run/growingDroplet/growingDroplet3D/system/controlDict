/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2012                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

// Some parameters are defined in a separate file to enable simpler parameter
// variation.
#include "<constant>/caseParameters"

application     interFlow;

startFrom       latestTime;

startTime       0;

stopAt          endTime;

// The endtime is chosen as the analytical time that is required to reach the
// the advancing contact angle plus 0.3 seconds for the contact line to move.
// Assumes an initial contact angle of 60 degree.
endTime         #eval{1.0/$inletFraction*(0.105*($advancingCA - 60) - 1.2)};

deltaT          1.0e-5;

writeControl    runTime;

writeInterval   #eval{0.01/$inletFraction};

purgeWrite      0;

writeFormat     binary;

writePrecision  14;

writeCompression off;

timeFormat      general;

timePrecision   6;

runTimeModifiable yes;

adjustTimeStep  no;

maxCo           0.1;

maxAlphaCo      0.1;

maxDeltaT       0.001;

maxCapillaryNum 0.0002; //0.5;

libs
(
    "libdynContactAngleModels.so"
);

OptimisationSwitches
{
/*
      //- Parallel IO file handler
      // uncollated (default), collated or masterUncollated
      fileHandler collated;

      //- collated: thread buffer size for queued file writes.
      // If set to 0 or not sufficient for the file size threading is not used.
      // Default: 2e9
      maxThreadFileBufferSize 2e9;

      //- masterUncollated: non-blocking buffer size.
      // If the file exceeds this buffer size scheduled transfer is used.
      // Default: 2e9
      maxMasterFileBufferSize 2e9;
*/
}


functions
{
    surfaces
    {
        type            surfaces;
        libs
        (
            "libsampling.so"
        );
        writeControl   outputTime;

        surfaceFormat  vtk;
        formatOptions
        {
            vtk
            {
                legacy true;
                format ascii;
            } 
        }
        fields
        (
            p U alpha.oil
        );
        
        interpolationScheme cellPoint;
        
        surfaces
        (
            isoAlpha
            {
                type        isoSurface;
                isoField    alpha.oil;
                isoValue    0.5;
                interpolate true;
            }
        );
    }
    plic
    {
        type            surfaces;
        libs            (geometricVoF postProcess);
        writeControl    writeTime;

        surfaceFormat   vtp;
        fields          (p U);

        interpolationScheme cell;

        surfaces
        {
            freeSurf
            {
                type            interface;
                interpolate     false;
            }
        }
    }

    // Compute wetted area and droplet volume
    wettedArea
    {
        // Mandatory entries (unmodifiable)
        type            surfaceFieldValue;
        libs            (fieldFunctionObjects);

        // Mandatory entries (runtime modifiable)
        fields          (alpha.oil);
        operation       areaIntegrate;
        regionType      faceZone;
        name            bottomFaces;

        // Optional entries (runtime modifiable)
        postOperation   none;
        weightField     none;
        scaleFactor     1.0;
        writeArea       false;
        surfaceFormat   none;
        writeFields     no;

        // Only execute evaluation every 10th time step
        executeControl  timeStep;
        executeInterval 10;
    }
    dropletVolume
    {
        // Mandatory entries (unmodifiable)
        type            volFieldValue;
        libs            (fieldFunctionObjects);

        // Mandatory entries (runtime modifiable)
        fields          (alpha.oil);
        operation       volIntegrate;
        regionType      all;

        // Optional entries (runtime modifiable)
        postOperation   none;
        weightField     none;
        scaleFactor     1.0;
        writeFields     no;

        // Only execute evaluation every 10th time step
        executeControl  timeStep;
        executeInterval 10;
    }

    // Monitor contact angles over time
    #include "monitorContactAngle"
}
// ************************************************************************* //

