/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2012                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version         2.0;
    format          ascii;
    class           dictionary;
    location        "system";
    object          controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
application     interFlow;

startFrom       latestTime;

startTime       0;

stopAt          endTime;

endTime         1.0e-1;

deltaT          1.0e-5;

writeControl    timeStep;

writeInterval   1;

purgeWrite      0;

writeFormat     ascii;

writePrecision  14;

writeCompression off;

timeFormat      general;

timePrecision   6;

runTimeModifiable yes;

adjustTimeStep  no;

maxCo           0.1;

maxAlphaCo      0.1;

maxDeltaT       0.001;

maxCapillaryNum 0.0002; //0.5;

libs
(
    "libtwoPhaseProperties.so"   
    "libdynContactAngleModels.so"
);

functions
{
/*    setVelocity
    {
        type            vortex2d;
        libs            ("libvortex2dFunctionObjects.so");
        writeControl    writeTime;
        mode            myvortex2D;
        scale           cosine;
        scaleCoeffs
        {
            period          1.6; //0.4
            scale           1.0;  //0.1
            level           0;
        }
        origin          (0 0 0);
        refDir          (1 0 0);
        axis            (0 1 0);
        
    }
*/
    surfaces
    {
        type            surfaces;
        libs
        (
            "libsampling.so"
        );
        writeControl   outputTime;

        surfaceFormat  vtk;
        formatOptions
        {
            vtk
            {
                legacy true;
                format ascii;
            } 
        }
        fields
        (
            p U alpha.water_glycerol
        );
        
        interpolationScheme cellPoint;
        
        surfaces
        (
            isoAlpha
            {
                type        isoSurface;
                isoField    alpha.water_glycerol;
                isoValue    0.5;
                interpolate true;
            }
        );
    }   

    plic
    {
        type            surfaces;
        libs            (geometricVoF postProcess);
        writeControl    writeTime;

        surfaceFormat   vtp;
        fields          (p U);

        interpolationScheme cell;

        surfaces
        {
            freeSurf
            {
                type            interface;
                interpolate     false;
            }
        }
    }

  /*  contactAngle2DEvaluation
    {
	type contactAngle2DEvaluation;
	libs ("libcontactAngle2DEvaluationFunctionObject.so");
	phaseIndicator alpha.water_glycerol;
	patchName bottom;
    }*/
}


// ************************************************************************* //
